import { relations } from "drizzle-orm"
import {
  bigint,
  boolean,
  integer,
  pgEnum,
  pgTable,
  text,
  timestamp,
  uuid,
  varchar,
} from "drizzle-orm/pg-core"

// autogenerated by better-auth

export const user = pgTable("user", {
  id: text("id").primaryKey(),
  name: text("name").notNull(),
  email: text("email").notNull().unique(),
  emailVerified: boolean("email_verified")
    .$defaultFn(() => false)
    .notNull(),
  image: text("image"),
  createdAt: timestamp("created_at")
    .$defaultFn(() => /* @__PURE__ */ new Date())
    .notNull(),
  updatedAt: timestamp("updated_at")
    .$defaultFn(() => /* @__PURE__ */ new Date())
    .notNull(),
  username: text("username").unique(),
  displayUsername: text("display_username"),
})

export const session = pgTable("session", {
  id: text("id").primaryKey(),
  expiresAt: timestamp("expires_at").notNull(),
  token: text("token").notNull().unique(),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
  ipAddress: text("ip_address"),
  userAgent: text("user_agent"),
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
})

export const account = pgTable("account", {
  id: text("id").primaryKey(),
  accountId: text("account_id").notNull(),
  providerId: text("provider_id").notNull(),
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
  accessToken: text("access_token"),
  refreshToken: text("refresh_token"),
  idToken: text("id_token"),
  accessTokenExpiresAt: timestamp("access_token_expires_at"),
  refreshTokenExpiresAt: timestamp("refresh_token_expires_at"),
  scope: text("scope"),
  password: text("password"),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
})

export const verification = pgTable("verification", {
  id: text("id").primaryKey(),
  identifier: text("identifier").notNull(),
  value: text("value").notNull(),
  expiresAt: timestamp("expires_at").notNull(),
  createdAt: timestamp("created_at").$defaultFn(
    () => /* @__PURE__ */ new Date()
  ),
  updatedAt: timestamp("updated_at").$defaultFn(
    () => /* @__PURE__ */ new Date()
  ),
})

export const rateLimit = pgTable("rate_limit", {
  id: text("id").primaryKey(),
  key: text("key"),
  count: integer("count"),
  lastRequest: bigint("last_request", { mode: "number" }),
})

// projects

export const ProjectsTable = pgTable("projects", {
  id: uuid("id").defaultRandom().primaryKey(),
  slug: varchar("slug", { length: 48 }).notNull().unique(),
  title: varchar("title", { length: 48 }).notNull(),
  shortDescription: varchar("short_description", { length: 48 }),
  githubUrl: text("github_url"),
  description: text("description"),
  createdAt: timestamp("created_at")
    .$defaultFn(() => new Date())
    .notNull(),
})

export const BadgesTable = pgTable("badges", {
  id: uuid("id").defaultRandom().primaryKey(),
  projectId: uuid("project_id")
    .notNull()
    .references(() => ProjectsTable.id, { onDelete: "cascade" }),
  badge_id: varchar("badge_id", { length: 32 }).notNull(),
})

export const ProjectVisibilityEnum = pgEnum("project_visibility", [
  "PUBLIC",
  "PRIVATE",
  "UNLISTED",
])

export const ProjectAccessTable = pgTable("project_access", {
  id: uuid("id").defaultRandom().primaryKey(),
  projectId: uuid("project_id")
    .notNull()
    .references(() => ProjectsTable.id, { onDelete: "cascade" }),
  visibility: ProjectVisibilityEnum("visibility").notNull().default("PRIVATE"),
})

// relation projects -> badges
// relation projects -> project_access
export const ProjectsRelations = relations(ProjectsTable, ({ many, one }) => ({
  badges: many(BadgesTable),
  access: one(ProjectAccessTable, {
    fields: [ProjectsTable.id],
    references: [ProjectAccessTable.projectId],
  }),
}))

// relation badges -> projects
export const BadgesRelations = relations(BadgesTable, ({ one }) => ({
  project: one(ProjectsTable, {
    fields: [BadgesTable.projectId],
    references: [ProjectsTable.id],
  }),
}))

// relation project_access -> projects
export const ProjectAccessRelations = relations(
  ProjectAccessTable,
  ({ one }) => ({
    project: one(ProjectsTable, {
      fields: [ProjectAccessTable.projectId],
      references: [ProjectsTable.id],
    }),
  })
)
